{"version":3,"sources":["components/SearchBar.js","components/BoxMain.js","components/BoxDown.js","components/LeftContainer.js","components/BoxRight.js","components/RightContainer.js","hooks/useBreakPoints.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","getWeather","useState","text","setText","className","onSubmit","e","preventDefault","type","placeholder","onChange","target","value","onClick","BoxMain","name","temp","description","id","sunrise","sunset","timezone","screenSize","img","timeDiff","parseInt","console","log","moment","utc","iconClass","smallMainTextClass","largeMainTextClass","test","add","isBetween","unix","src","alt","Math","round","BoxDown","feels","wind","humidity","sunriseTime","format","sunsetTime","boxDownLeftClass","LeftContainer","weather","leftContainerClass","main","sys","feels_like","speed","BoxRight","key","date","day","dateFormed","smallForecastClass","RightContainer","forecast","today","regexToday","RegExp","rightContainerClass","list","map","dt_txt","getDeviceConfig","width","useBreakPoint","window","innerWidth","breakPoint","setBreakPoint","useEffect","calcInnerWidth","throttle","addEventListener","removeEventListener","App","setWeather","setForecast","searchContainerClass","a","ApiKey","process","urlCurrent","urlForecast","axios","get","then","response","data","catch","error","request","alert","cod","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aeb1fcc4.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport '../styles/LeftContainer.css'\r\n\r\nconst SearchBar = ({ getWeather }) => {\r\n    const [text, setText] = useState('');\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <form className='formStyle' onSubmit={onSubmit}>\r\n            <input\r\n                className='inputStyle'\r\n                type='text'\r\n                placeholder='Search city...'\r\n                onChange={e => setText(e.target.value)}\r\n            />\r\n            <button className='buttonStyle' onClick={() => getWeather(text)}>Search</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SearchBar","import { findByLabelText } from \"@testing-library/dom\";\r\nimport moment from \"moment\";\r\nimport \"../styles/LeftContainer.css\"\r\n\r\nconst BoxMain = ({ name, temp, description, id, sunrise, sunset, timezone, screenSize }) => {\r\n    let img = \"\";\r\n    const timeDiff = parseInt(timezone / 3600)\r\n    console.log(moment.utc());\r\n    const iconClass = `iconStyle${screenSize}`;\r\n    const smallMainTextClass = `smallMainTextStyle${screenSize}`;\r\n    const largeMainTextClass = `largeMainTextStyle${screenSize}`;\r\n\r\n    if (/801/.test(id)) {\r\n        (moment((moment.utc())).add((parseInt(timeDiff / 3600)), 'hours').isBetween(moment.unix(sunrise), moment.unix(sunset))) ?\r\n            (img = \"few_clouds_d.png\") : (img = \"few_clouds_n.png\")\r\n    }\r\n    if ((/802/.test(id)) || (/803/.test(id)) || (/804/.test(id))) {\r\n        img = \"clouds.png\"\r\n    }\r\n    if (/800/.test(id)) {\r\n        (moment((moment.utc())).add((parseInt(timeDiff / 3600)), 'hours').isBetween(moment.unix(sunrise), moment.unix(sunset))) ?\r\n            (img = \"clear_d.png\") : (img = \"clear_n.png\")\r\n\r\n    }\r\n    if (/^7/.test(id)) {\r\n        img = \"fog.png\"\r\n    }\r\n    if (/^6/.test(id)) {\r\n        img = \"snow.png\"\r\n    }\r\n    if ((/^5/.test(id)) || (/^3/.test(id))) {\r\n        img = \"rain.png\"\r\n    }\r\n    if (/^2/.test(id)) {\r\n        img = \"storm.png\"\r\n    }\r\n\r\n    return (\r\n        <div className='boxMainLeftStyle'>\r\n            <div className='frameStyle'>\r\n                <img className={iconClass} src={`../ assets / weatherIcons / ${img}`} alt=\"Couldn't load.\" />\r\n            </div>\r\n            <div className='infoStyle'>\r\n                <div className={smallMainTextClass}>{name}</div>\r\n                <div className={largeMainTextClass}>{Math.round(temp)}°C</div>\r\n                <div className={smallMainTextClass}>{description}</div>\r\n            </div>\r\n        </div >\r\n    )\r\n    //return (<div style={boxLeftStyle}></div>);\r\n}\r\n\r\n\r\n\r\nexport default BoxMain;","import moment from \"moment\";\r\nimport \"../styles/LeftContainer.css\";\r\n\r\nconst BoxDown = ({ sunrise, sunset, feels, wind, humidity, screenSize }) => {\r\n    const sunriseTime = moment.unix(sunrise).format(\"HH:mm\");\r\n    const sunsetTime = moment.unix(sunset).format(\"HH:mm\");\r\n    const boxDownLeftClass = `boxDownLeftStyle${screenSize}`;\r\n\r\n\r\n    return (\r\n        <div className={boxDownLeftClass}>\r\n            <div className='rowStyle'>\r\n                <div>Feels like:</div>\r\n                <div>{Math.round(feels)}°C</div>\r\n            </div>\r\n            <hr className='hrStyle' />\r\n            <div className='rowStyle'>\r\n                <div>Wind:</div>\r\n                <div>{wind} km/h</div>\r\n            </div>\r\n            <hr className='hrStyle' />\r\n            <div className='rowStyle'>\r\n                <div>Humidity:</div>\r\n                <div>{humidity}%</div>\r\n            </div>\r\n            <hr className='hrStyle' />\r\n            <div className='rowStyle'>\r\n                <div>Sunrise:</div>\r\n                <div>{sunriseTime}</div>\r\n            </div>\r\n            <hr className='hrStyle' />\r\n            <div className='rowStyle'>\r\n                <div>Sunset:</div>\r\n                <div>{sunsetTime}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default BoxDown;","import SearchBar from \"./SearchBar\";\r\nimport BoxMain from \"./BoxMain\";\r\nimport BoxDown from \"./BoxDown\";\r\nimport \"../styles/LeftContainer.css\";\r\n\r\nconst LeftContainer = ({ weather, getWeather, screenSize }) => {\r\n    const leftContainerClass = `leftContainerStyle${screenSize}`;\r\n\r\n    return (\r\n        <div className={leftContainerClass}>\r\n            <SearchBar getWeather={getWeather} />\r\n            <BoxMain\r\n                name={weather.name}\r\n                temp={weather.main.temp}\r\n                description={weather.weather[0].description}\r\n                id={weather.weather[0].id}\r\n                sunrise={weather.sys.sunrise}\r\n                sunset={weather.sys.sunset}\r\n                timezone={weather.timezone}\r\n                screenSize={screenSize}\r\n            />\r\n            <BoxDown\r\n                sunrise={weather.sys.sunrise}\r\n                sunset={weather.sys.sunset}\r\n                feels={weather.main.feels_like}\r\n                wind={weather.wind.speed}\r\n                humidity={weather.main.humidity}\r\n                screenSize={screenSize}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default LeftContainer;","import moment from \"moment\";\r\nimport \"../styles/RightContainer.css\"\r\n\r\nconst BoxRight = ({ key, date, temp, id, description, screenSize }) => {\r\n    let img = '';\r\n    const day = moment(date).format('ddd');\r\n    const dateFormed = moment(date).format('DD/MMM');\r\n    const smallForecastClass = `smallForecastStyle${screenSize}`;\r\n\r\n    if (/801/.test(id)) {\r\n        img = \"few_clouds_d.png\"\r\n    }\r\n    if ((/802/.test(id)) || (/803/.test(id)) || (/804/.test(id))) {\r\n        img = \"clouds.png\"\r\n    }\r\n    if (/800/.test(id)) {\r\n        img = \"clear_d.png\"\r\n\r\n    }\r\n    if (/^7/.test(id)) {\r\n        img = \"fog.png\"\r\n    }\r\n    if (/^6/.test(id)) {\r\n        img = \"snow.png\"\r\n    }\r\n    if ((/^5/.test(id)) || (/^3/.test(id))) {\r\n        img = \"rain.png\"\r\n    }\r\n    if (/^2/.test(id)) {\r\n        img = \"storm.png\"\r\n    }\r\n\r\n    return (\r\n        <div className='boxRightStyle'>\r\n            <div className='dateStyle'>\r\n                <div className='forecastTextStyle'>{day}</div>\r\n                <div className={smallForecastClass}>{dateFormed}</div>\r\n            </div>\r\n            <div className='forecastDataStyle'>\r\n                <div className='forecastInfoStyle'>\r\n                    <div className='forecastTextStyle'> {Math.round(temp)}°C </div>\r\n                    <div className={smallForecastClass}> {description} </div>\r\n                </div>\r\n                <img className='imgStyle' src={`weatherIcons/${img}`} alt=\"Couldn't load.\" />\r\n            </div>\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default BoxRight\r\n","import BoxRight from \"./BoxRight\";\r\nimport moment from \"moment\";\r\nimport \"../styles/RightContainer.css\"\r\n\r\nconst RightContainer = ({ forecast, screenSize }) => {\r\n    const today = (moment().format('YYYY-MM-DD'));\r\n    const regexToday = new RegExp(today);\r\n    const rightContainerClass = `rightContainerStyle${screenSize}`\r\n\r\n\r\n\r\n    return (\r\n        <div className={rightContainerClass}>\r\n            {(forecast.list).map((forecast) => (\r\n                ((regexToday.test(forecast.dt_txt)) || !(/12:00:00$/.test(forecast.dt_txt))) ?\r\n                    ('') :\r\n                    (<BoxRight\r\n                        key={forecast.dt_txt}\r\n                        date={forecast.dt_txt}\r\n                        temp={forecast.main.temp}\r\n                        id={forecast.weather[0].id}\r\n                        description={forecast.weather[0].description}\r\n                        screenSize={screenSize}\r\n                    />)\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RightContainer;","import { useState, useEffect } from \"react\";\r\nimport throttle from \"lodash.throttle\";\r\n\r\nconst getDeviceConfig = (width) => {\r\n    if (width < 320) {\r\n        return 'xs';\r\n    }\r\n    else if (width >= 320 && width < 720) {\r\n        return 'sm';\r\n    }\r\n    else if (width >= 720 && width < 1100) {\r\n        return 'md';\r\n    }\r\n    else if (width >= 1100) {\r\n        return 'lg';\r\n    }\r\n};\r\n\r\nconst useBreakPoint = () => {\r\n    const [breakPoint, setBreakPoint] = useState(() => getDeviceConfig(window.innerWidth));\r\n\r\n    useEffect(() => {\r\n        const calcInnerWidth = throttle(function () {\r\n            setBreakPoint(getDeviceConfig(window.innerWidth))\r\n        }, 200);\r\n        window.addEventListener('resize', calcInnerWidth);\r\n        return () => window.removeEventListener('resize', calcInnerWidth);\r\n    }, []);\r\n    return breakPoint;\r\n}\r\n\r\nexport default useBreakPoint;","import { useState } from 'react';\r\nimport LeftContainer from './components/LeftContainer';\r\nimport RightContainer from './components/RightContainer';\r\nimport axios from 'axios';\r\nimport SearchBar from './components/SearchBar'\r\nimport './styles/App.css';\r\nimport useBreakPoint from './hooks/useBreakPoints';\r\n\r\nfunction App() {\r\n  const [weather, setWeather] = useState({});\r\n  const [forecast, setForecast] = useState([]);\r\n\r\n\r\n  const screenSize = useBreakPoint();\r\n  const searchContainerClass = `searchContainer${screenSize}`;\r\n\r\n  const getWeather = async (text) => {\r\n    const ApiKey = process.env.REACT_APP_API_KEY\r\n    const urlCurrent = `https://api.openweathermap.org/data/2.5/weather?q=${text}&units=metric&appid=${ApiKey}`;\r\n    const urlForecast = `https://api.openweathermap.org/data/2.5/forecast?q=${text}&units=metric&appid=${ApiKey}`;\r\n    await axios.get(urlCurrent)\r\n      .then((response) => {\r\n        setWeather(response.data);\r\n        return (\r\n          weather\r\n        )\r\n      })\r\n      .catch((error) => {\r\n        if (error.request) {\r\n          alert(\"There's no such city in the database.\");\r\n        }\r\n      })\r\n    await axios.get(urlForecast)\r\n      .then((response) => {\r\n        setForecast(response.data);\r\n        return (\r\n          forecast\r\n        )\r\n      })\r\n    return (\r\n      forecast,\r\n      weather\r\n    )\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {((typeof weather.main != \"undefined\") && (forecast.cod === \"200\")) ?\r\n        (\r\n          <div className='mainStyle'>\r\n            <LeftContainer weather={weather} getWeather={getWeather} screenSize={screenSize} />\r\n            <RightContainer forecast={forecast} screenSize={screenSize} />\r\n          </div>\r\n        ) :\r\n        (\r\n          <div className='blankStyle'>\r\n            <p className='welcomeTextStyle'>Hello, please search for your city.</p>\r\n            <div className={searchContainerClass}><SearchBar getWeather={getWeather} /></div>\r\n          </div>\r\n        )\r\n      }\r\n    </>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}